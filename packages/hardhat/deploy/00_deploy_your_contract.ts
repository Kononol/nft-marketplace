import { HardhatRuntimeEnvironment } from "hardhat/types";
import { DeployFunction } from "hardhat-deploy/types";
import { Contract } from "ethers";

const deployYourContract: DeployFunction = async function (hre: HardhatRuntimeEnvironment) {
  const { deployer } = await hre.getNamedAccounts();
  const { deploy } = hre.deployments;

  // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–µ–ø–ª–æ–µ—Ä–∞
  if (!deployer) {
    throw new Error("Deployer account not configured");
  }

  const deploymentResult = await deploy("YourContract", {
    from: deployer,
    args: [deployer],
    log: true,
    autoMine: true,
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –∂–∏–≤—ã—Ö —Å–µ—Ç–µ–π
    waitConfirmations: hre.network.name === "hardhat" ? 0 : 2,
  });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –¥–µ–ø–ª–æ—è
  if (!deploymentResult.newlyDeployed) {
    console.log("Reusing existing contract at", deploymentResult.address);
    return;
  }

  try {
    const yourContract = await hre.ethers.getContract<Contract>("YourContract", deployer);
    console.log("‚úÖ Contract successfully deployed at:", deploymentResult.address);
    console.log("üëã Initial greeting:", await yourContract.greeting());
  } catch (error) {
    console.error("‚ö†Ô∏è Contract deployment verification failed:", error);
  }
};

export default deployYourContract;

deployYourContract.tags = ["YourContract"];
